	6237
!=	9
!NativeIO.isAvailable())	1
!file.getParentFile().isDirectory())	1
!fullyDelete(contents[i]))	1
!fullyDeleteContents(dir)?false:dir.delete();	1
!target.delete()	1
!untarDir.isDirectory())	1
"	32
"",	1
"'	2
"':	1
");	5
"+(System.currentTimeMillis()-a));	1
"-c",	2
"-u",	1
".	1
"/";	2
":	3
"does	1
"ln	1
&&	6
'"	2
'");	2
(");	1
(47行)。因此，每次map运行之后，会对输出按照key进行排序，然后把输出传递给本地的combiner（按照作业的配置与Reducer一样），进行本地聚合。	1
(IOException	5
(InterruptedException	2
(String[])null);	1
(ZipEntry)entries.nextElement();	1
(list	1
(powered	1
(tokenizer.hasMoreTokens())	1
(values.hasNext())	1
*/	1
+	47
++i$)	1
++i)	7
+=	2
-)");	1
-1)	1
-1;	1
-dc	1
-s	1
-xf	1
.class	1
/**	1
/*if(!rv)	1
//	47
//在整个项目下创建input目录，其中放任意个txt文件	1
0)	3
0,	4
0;	10
0L;	2
1	1
1)	1
1>	15
1];	1
2	1
2>	5
5;	1
:	1
;	2
<	28
<key,	1
<word>,	1
=	99
==	10
>	1
>=	1
@Deprecated	1
@Override	4
@deprecated	1
Bye	1
Bye,	3
Configuration	6
CygPathCommand	1
CygPathCommand(String	1
Enumeration	1
Exception	1
Exception:	1
FSDataInputStream	1
FSDataOutputStream	3
Fernflower	1
File	8
File(dst,	1
File(unzipDir,	1
File.createTempFile(prefix	1
FileInputFormat.setInputPaths(conf,	1
FileInputStream(src);	1
FileOutputFormat.setOutputPath(conf,	1
FileOutputStream	1
FileOutputStream(dst),	1
FileOutputStream(file);	1
FileStatus	2
FileStatus[]	3
FileSystem	7
FileUtil	1
FileUtil()	1
FileUtil.CygPathCommand(filename)).getResult():filename;	1
FileUtils.isSymlink(allFiles[i]);	1
File[]	5
FsAction	3
FsPermission	3
Goodbye	1
Goodbye,	3
H	2
Hadoop	2
Hadoop,	4
Hello,	5
I/O	2
IDEA	1
IOException	32
IOException("Can't	1
IOException("Cannot	2
IOException("Error	1
IOException("Failed	1
IOException("Invalid	2
IOException("Mkdirs	2
IOException("Target	2
IOException("Unable	1
IOException("`"	1
IOException("copying	1
IOException("replaceFile	1
IOException(exceptions.toString());	1
IOException(src.toString()	3
IOException,	1
IOUtils.closeStream(null);	2
IOUtils.closeStream(out);	2
IOUtils.copyBytes(in,	4
InputStream	5
IntWritable	1
IntWritable(1);	1
IntWritable(sum));//生成键值对<key,sum>	1
IntWritable,	1
IntWritable>	4
IntelliJ	1
InterruptedException	1
Iterator<IntWritable>	1
JobClient.runJob(conf);	1
JobConf	1
JobConf(WordCount.class);	1
LOG	1
LOG.debug("Error	1
LOG.warn("Command	1
Log	1
LogFactory.getLog(FileUtil.class);	1
Map	1
MapReduceBase	2
Mapper<LongWritable,	1
Mapper中的map方法通过指定的	1
NativeIO.chmod(f.getCanonicalPath(),	1
No	3
Object[]{Short.valueOf(permission.toShort())}));	1
Object[]{Short.valueOf(permission.toShort())})});	1
OutputCollector<Text,	2
Path	16
Path("input"));	1
Path("output"));//输出结果到整个项目下的output目录	1
Path(dst,	3
Path(srcName),	1
Path.WINDOWS?(new	1
Path[]	5
Path[]{path}:stat2Paths(stats);	1
Path[stats.length];	1
Process	1
Reduce	1
Reducer<Text,	1
Reducer中的reduce方法仅是将每个key本例中就是单词）出现的次数求和。	1
Reporter	2
Runtime.getRuntime().exec(cmd,	1
Shell	1
Shell.execCommand(args);	1
ShellCommandExecutor	2
ShellCommandExecutor(shellCmd);	2
Source	1
String	18
String(buff,	1
String...	1
String.format("%04o",	2
StringBuffer	3
StringBuffer();	3
StringBuilder	1
StringBuilder();	1
StringTokenizer	1
StringTokenizer(line);	1
StringUtils.stringifyException(var7));	1
String[]	7
String[]{"bash",	2
String[]{"chmod",	1
String[]{"cygpath",	1
String[cmd.length	1
System.arraycopy(cmd,	1
System.out.println("ok,spend	1
Tar	1
Text	2
Text();	1
Text,	3
TextInputFormat(50行)一次处理一行。然后，它通过StringTokenizer	1
Thread.sleep(1000L);	1
WordCount	1
WordCount还指定了一个combiner	1
World	2
World,	4
ZipEntry	1
ZipFile	1
ZipFile(inFile);	1
[<Bye,1>]或者	1
[<World,1>,<World,1>]	1
`"	1
a	9
a=System.currentTimeMillis();	1
addString)	1
allFiles	1
allFiles.length;	1
already	1
args	1
args)	1
args,	1
args[cmd.length]	1
argument	1
arr$	1
arr$[i$];	1
b	2
basefile,	1
basefile.getName(),	1
basefile.getParentFile());	1
boolean	27
buff	1
buffer	1
but	1
by	2
byte[4096];	1
byte[8192];	1
byte[]	2
catch	7
changing	1
char[]	1
chars=line.toCharArray();	1
checkDependencies(FileSystem	1
checkDependencies(srcFS,	1
checkDest((String)null,	2
checkDest(String	1
checkDest(src.getName(),	2
checkDest(srcDir.getName(),	1
checkReturnValue(boolean	1
checkReturnValue(rv,	6
chmod(String	2
chmod(filename,	1
class	5
cmd	2
cmd)	1
cmd.length);	1
cmdBuf	1
cmdBuf.append("-R	1
cmdBuf.append("chmod	1
cmdBuf.append(filename);	1
cmdBuf.append(perm).append("	1
cmdBuf.toString()};	1
code	2
command;	1
conf	1
conf)	5
conf))	1
conf);	7
conf,	3
conf.setCombinerClass(Reduce.class);	1
conf.setInputFormat(TextInputFormat.class);	1
conf.setJobName("wordcount");	1
conf.setMapperClass(Map.class);	1
conf.setOutputFormat(TextOutputFormat.class);	1
conf.setOutputKeyClass(Text.class);	1
conf.setOutputValueClass(IntWritable.class);	1
conf.setReducerClass(Reduce.class);	1
contents	7
contents.length;	5
contents;	2
contents[i].delete();	1
contents[i].getName()),	1
contents[i].getPath(),	2
contents[i].getPath().getName()),	2
convert	1
copy	2
copy(File	1
copy(FileSystem	4
copy(contents[i],	1
copy(srcFS,	4
copyMerge(FileSystem	1
copyStderr(Process	1
copyStderr(p));	1
create	2
createLocalTempFile(File	1
cygwin	1
decompiler)	1
deleteSource,	12
deleteSource?fullyDelete(src):true;	1
deleteSource?srcFS.delete(src,	2
deleteSource?srcFS.delete(srcDir,	1
deletionSucceeded	3
deletionSucceeded;	1
destination	1
dir)	6
dir.length();	1
dir.list();	1
dir.listFiles();	3
dir.toString());	2
dir:	2
directory	3
directory");	5
dst	6
dst)	1
dst);	2
dst,	11
dst.makeQualified(dstFS).toString()	1
dst;	1
dstFS)	1
dstFS,	18
dstFS.create(dst);	1
dstFS.create(dst,	1
dstFS.create(dstFile);	1
dstFS.getFileStatus(dst);	2
dstFile	1
dstFile,	2
dstq	1
dstq.length())	1
e	4
e:chars){	1
else	20
entries	1
entry	1
entry.getName());	1
err	1
err.read(buff))	1
err.read(buff);	1
error	2
exceptions	1
exceptions.append("\n");	1
exceptions.append(var15.getMessage());	1
execCommand(File	1
execCommand(f,	1
execSetPermission(File	1
execSetPermission(f,	1
exist");	1
exists");	1
exit	1
exitcode	1
exitcode);	1
exited	1
extends	3
f,	9
f.getCanonicalPath();	1
f.setExecutable(group.implies(FsAction.EXECUTE),	1
f.setExecutable(user.implies(FsAction.EXECUTE),	1
f.setReadable(group.implies(FsAction.READ),	1
f.setReadable(user.implies(FsAction.READ),	1
f.setWritable(group.implies(FsAction.WRITE),	1
f.setWritable(user.implies(FsAction.WRITE),	1
failed	3
false);	8
false;	9
file	6
file)	1
file,	1
file.getParentFile().toString());	1
fileNames	1
fileNames;	1
filename	1
filename)	1
filename,	2
files	1
files,	1
files;	1
final	3
finally	5
for	2
for(char	1
for(int	9
from	1
fs,	1
fs.delete(dir,	1
fullyDelete(File	1
fullyDelete(FileSystem	1
fullyDeleteContents(File	1
getDU(File	1
getDU(allFiles[i]);	1
getExecString()	1
getResult()	1
gotException	2
group	1
gzip	1
gzipped	1
hadoop.mapReduce;	1
i	14
i$	2
i);	1
i;	1
if(!b	1
if(!contents[i].delete())	1
if(!contents[i].isDir())	1
if(!copy(srcFS,	1
if(!dir.exists())	1
if(!dir.isDirectory())	1
if(!dst.mkdirs())	1
if(!dstFS.exists(dst))	1
if(!dstFS.mkdirs(dst))	2
if(!entry.isDirectory())	1
if(!file.getParentFile().mkdirs()	1
if(!isSymLink)	1
if(!overwrite)	1
if(!sdst.isDir())	1
if(!src.isFile())	1
if(!src.renameTo(target))	2
if(!srcFS.getFileStatus(srcDir).isDir())	1
if(!srcFS.isFile(src))	2
if(!untarDir.mkdirs()	1
if(LOG.isDebugEnabled())	1
if(NativeIO.isAvailable())	1
if(addString	1
if(allFiles	1
if(contents	1
if(contents[i].isFile())	1
if(dst.toString().isEmpty())	1
if(dstFS.exists(dst))	1
if(dstq.startsWith(srcq))	1
if(exitcode	1
if(fileNames	1
if(files	1
if(gotException)	1
if(group	1
if(group.implies(FsAction.EXECUTE)	1
if(group.implies(FsAction.READ)	1
if(group.implies(FsAction.WRITE)	1
if(gzipped)	2
if(isDeleteOnExit)	1
if(line	1
if(null	1
if(recursive)	1
if(returnVal	1
if(sdst.isDir())	1
if(src.isDirectory())	1
if(srcFS	1
if(srcFS.getFileStatus(src).isDir())	2
if(srcq.length()	1
if(srcs.length	1
if(stats	1
implements	2
import	28
in	5
in.close();	2
in.read(buffer))	1
inFile	1
inFile,	2
inFile.toString().endsWith("gz");	1
int	9
interrupted.");	1
is	2
isDeleteOnExit)	1
isSymLink	2
isSymLink;	1
its	1
itself.");	1
java.io.BufferedReader;	1
java.io.File;	1
java.io.FileInputStream;	1
java.io.FileOutputStream;	1
java.io.IOException;	2
java.io.InputStream;	1
java.util.Enumeration;	1
java.util.Iterator;	1
java.util.StringTokenizer;	1
java.util.zip.ZipEntry;	1
java.util.zip.ZipFile;	1
k	1
key,	2
key为Bye,value为[1]或者	1
key为World,value为[1,1]	1
l	5
last	1
len	3
len$	1
len$;	1
len));	1
line	2
line;	1
lines)	1
lines.readLine();	1
linkname)	1
linkname;	1
list(File	1
listFiles(File	1
listFiles(src);	1
long	3
m	4
main(String[]	1
makeCanonicalPath)	1
makeCanonicalPath?makeShellPath(file.getCanonicalPath()):makeShellPath(file.toString());	1
makeShellPath(File	2
makeShellPath(String	1
makeShellPath(file,	1
map(LongWritable	1
multiple	1
n	1
new	52
not	2
null)	7
null;	5
null?new	1
o	3
occurred	2
of	2
one	1
one);//生成	1
or	5
org.apache.commons.io.FileUtils;	1
org.apache.commons.logging.Log;	1
org.apache.commons.logging.LogFactory;	1
org.apache.hadoop.conf.Configuration;	1
org.apache.hadoop.fs.Path;	1
org.apache.hadoop.fs.permission.FsAction;	1
org.apache.hadoop.fs.permission.FsPermission;	1
org.apache.hadoop.fs;	1
org.apache.hadoop.io.IOUtils;	1
org.apache.hadoop.io.IntWritable;	1
org.apache.hadoop.io.LongWritable;	1
org.apache.hadoop.io.Text;	1
org.apache.hadoop.io.nativeio.NativeIO;	1
org.apache.hadoop.mapred.*;	1
org.apache.hadoop.util.Shell.ShellCommandExecutor;	1
org.apache.hadoop.util.Shell;	1
org.apache.hadoop.util.StringUtils;	1
other	2
out	6
out,	3
out.close();	2
out.write(addString.getBytes("UTF-8"));	1
out.write(buffer,	1
output	1
output,	2
output.collect(key,	1
output.collect(word,	1
output.collect(word,one);	1
output;	1
overwrite)	1
overwrite);	4
overwrite,	5
p	6
p)	1
p,	1
p.getErrorStream();	1
p.waitFor();	1
package	2
parseExecResult(BufferedReader	1
path");	1
path)	2
path:	1
path};	1
perm)	1
perm,	2
permission	1
permission)	3
permission);	7
permission.getGroupAction();	1
permission.getOtherAction();	1
permission.getUserAction();	1
permission.toShort());	1
permissions	1
prefix,	1
private	9
process	1
protected	2
public	33
recreated	1
recursive)	1
reduce(Text	1
rename	1
replaceFile(File	1
reporter)	2
result	1
result.append(new	1
result.toString();	1
result;	1
ret	1
ret;	1
ret[i]	1
return	35
returnVal	5
returnVal;	2
rv	4
rv,	1
s	2
sdst	2
set	1
setPermission(File	1
shExec	1
shExec.execute();	1
shExec.getExitCode();	1
shellCmd	2
shexec	1
shexec.execute();	1
shexec.getExitCode();	1
size	2
size;	1
specified	1
src	4
src,	9
src.makeQualified(srcFS).toString()	1
srcDir,	1
srcFS,	6
srcFS.listStatus(src);	2
srcFS.listStatus(srcDir);	1
srcFS.open(contents[i].getPath());	1
srcFS.open(src);	2
srcName)	1
srcName),	1
srcName,	1
srcq	1
srcs,	1
srcs.length;	1
srcs;	1
srcs[0],	1
stat2Paths(FileStatus[]	2
static	37
stats	1
stats)	1
stats,	1
stats.length;	1
stats[i].getPath();	1
subdirectory	1
such	3
sum	2
symLink(String	1
t	1
target	1
target)	1
target);	1
target,	1
this.command	1
this.command;	1
this.command[2]	1
this.result	1
this.result;	1
this.run();	1
throw	21
throws	34
tmp	1
tmp.deleteOnExit();	1
tmp;	1
to	9
tokenizer	1
true):true;	3
true);	5
true,	1
true;	5
try	12
u	1
unTar(File	1
unZip(File	1
untarCommand	1
untarCommand.append("	2
untarCommand.append("'	2
untarCommand.append("cd	1
untarCommand.append("tar	1
untarCommand.append(makeShellPath(inFile));	2
untarCommand.append(makeShellPath(untarDir));	1
untarCommand.toString()};	1
untarDir)	1
untarDir);	1
untarring	1
unzipDir)	1
user	1
user.implies(FsAction.EXECUTE))	1
user.implies(FsAction.READ))	1
user.implies(FsAction.WRITE))	1
v	1
value,	1
value.toString();	1
values)>	1
values,	1
values.next().get();//values.next().get()获得键值对里面的值	1
var10)	1
var10;	1
var15)	1
var2	1
var2--	1
var4)	1
var6)	1
var7)	2
var8)	1
var8;	1
void	12
while	3
while((i	1
while(entries.hasMoreElements())	1
while(target.exists()	1
with	1
with:	1
word	1
word.set(e+"");	1
word.set(tokenizer.nextToken());	1
zipFile	1
zipFile.close();	1
zipFile.entries();	1
zipFile.getInputStream(entry);	1
{	154
|	1
}	154
}*/	1
。	1
一	3
上	1
不	2
业	1
个	6
中	3
为	2
之	1
二	2
于	1
以	1
件	2
作	1
例	1
值	4
入	2
其	1
内	2
准	1
出	6
分	2
切	2
列	1
后	1
因	1
处	1
如	1
实	1
容	2
对	4
将	1
就	1
干	1
并	1
式	1
形	1
文	2
是	8
格	1
此	2
比	1
的	10
确	2
示	1
空	1
符	1
第	4
若	1
行	1
表	1
说	1
输	8
这	1
那	1
里	1
键	3
隔	1
面	2
，	5
：	8
